let notes = JSON.parse(localStorage.getItem("dailyNotes")) || [];
let editIndex = null, query = '', lastDeleted = null, undoTimer = null;

// DOM
const app = document.getElementById('app');
const createBtn = document.getElementById('createNoteBtn');
const modal = document.getElementById('modal');
const modalTitle = document.getElementById('modalTitle');
const form = document.getElementById('noteForm');
const cancelBtn = document.getElementById('cancelBtn');
const titleInput = document.getElementById('noteTitle');
const topicInput = document.getElementById('noteTopic');
const textInput = document.getElementById('noteText');
const fileInput = document.getElementById('noteFile');

const viewModal = document.getElementById('viewModal');
const viewTitle = document.getElementById('viewTitle');
const viewTopic = document.getElementById('viewTopic');
const viewFiles = document.getElementById('viewFiles');
const viewText = document.getElementById('viewText');
const closeViewBtn = document.getElementById('closeViewBtn');

const searchInput = document.getElementById('searchInput');
const exportBtn = document.getElementById('exportBtn');
const importBtn = document.getElementById('importBtn');
const importInput = document.getElementById('importInput');
const toast = document.getElementById('toast');
const undoLink = document.getElementById('undoLink');
const densityBtn = document.getElementById('densityBtn');

/* ===== —Ç–µ–º–∞ ‚Üí –∏–∫–æ–Ω–∫–∞/—Ü–≤–µ—Ç ===== */
function getTopicMeta(topic = "") {
  const t = (topic || "").toLowerCase();
  const table = [
    { keys: ['—Ä–∞–±–æ—Ç','work'], emoji: 'üõ†', hue: 265 },
    { keys: ['–ª–∏—á','personal'], emoji: 'üè∑Ô∏è', hue: 200 },
    { keys: ['–∏–¥–µ','idea'], emoji: 'üí°', hue: 45 },
    { keys: ['—É—á–µ–±','—É—á—ë–±','study','school'], emoji: 'üéì', hue: 160 },
    { keys: ['—Ñ–∏–Ω','–±—é–¥–∂','money'], emoji: 'üí∞', hue: 110 },
    { keys: ['–ø—É—Ç–µ—à','trip','travel'], emoji: '‚úàÔ∏è', hue: 15 },
    { keys: ['–∞—Ä—Ç','—Ä–∏—Å','design','art'], emoji: 'üé®', hue: 300 },
    { keys: ['–∑–¥–æ—Ä–æ–≤','—Å–ø–æ—Ä—Ç','health'], emoji: '‚ù§Ô∏è', hue: 350 },
    { keys: ['–≤—Å—Ç—Ä–µ—á','–º–∏—Ç','meet'], emoji: 'üìÖ', hue: 210 },
    { keys: ['–ø–æ–∫—É–ø','shop'], emoji: 'üõí', hue: 20 },
  ];
  for (const row of table) if (row.keys.some(k => t.includes(k)))
    return { emoji: row.emoji, color: `hsl(${row.hue},70%,55%)` };
  const hue = [...t].reduce((a,c)=>(a + c.charCodeAt(0)) % 360, 265);
  return { emoji: 'üóíÔ∏è', color: `hsl(${hue},70%,55%)` };
}

function base64ToArrayBuffer(b64){
  const bin = atob(b64.split(',')[1]);
  const len = bin.length;
  const bytes = new Uint8Array(len);
  for(let i=0;i<len;i++) bytes[i] = bin.charCodeAt(i);
  return bytes.buffer;
}

/* ===== –†–ï–ù–î–ï–† –ö–ê–†–¢–û–ß–ï–ö ===== */
function renderNotes() {
  const filtered = notes
    .map((n, idx) => ({ n, idx }))
    .filter(({n}) =>
      (n.title||'').toLowerCase().includes(query) ||
      (n.topic||'').toLowerCase().includes(query) ||
      (n.text ||'').toLowerCase().includes(query)
    );

  app.innerHTML = `
    <div class="card-grid">
      ${filtered.map(({n, idx}) => {
        const meta = getTopicMeta(n.topic);

        // –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤ (–¥–æ 3 —à—Ç.)
        let filePreview = "";
        if (n.files && n.files.length > 0) {
          const previews = n.files.slice(0,3).map((f,j)=>{
            if(f.data.startsWith('data:image')){
              return `<img src="${f.data}" alt="${f.name}" data-idx="${idx}" data-f="${j}" />`;
            }
            return `<div class="file-icon" data-idx="${idx}" data-f="${j}">üìé ${f.name.split('.').pop()}</div>`;
          }).join("");
          const more = n.files.length>3 ? `<span class="more">+${n.files.length-3}</span>` : "";
          filePreview = `<div class="card__files">${previews}${more}</div>`;
        }

        return `
          <div class="card card--accent" data-index="${idx}" style="--accent:${meta.color}">
            <div class="card__actions">
              <button onclick="editNote(${idx});event.stopPropagation()">‚úèÔ∏è</button>
              <button onclick="deleteNote(${idx});event.stopPropagation()">‚ùå</button>
            </div>
            <div class="card__header">
              <span class="topic-badge" style="--accent:${meta.color}">${meta.emoji} ${n.topic||"–ë–µ–∑ —Ç–µ–º—ã"}</span>
            </div>
            <div class="card__content">
              <h2 class="card__title">${n.title}</h2>
              <p class="card__description">${n.text.slice(0,80)}${n.text.length>80?"...":""}</p>
              ${filePreview}
            </div>
          </div>
        `;
      }).join('')}
    </div>`;

  // –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ (–Ω–µ –ø–æ —Ñ–∞–π–ª–∞–º/–∫–Ω–æ–ø–∫–∞–º)
  document.querySelectorAll(".card").forEach(card=>{
    card.addEventListener("click", e=>{
      if (e.target.tagName==="BUTTON" || e.target.closest(".card__files")) return;
      openView(card.dataset.index);
    });
  });
  // –∫–ª–∏–∫ –ø–æ –º–∏–Ω–∏-–ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞
  document.querySelectorAll(".card__files img, .card__files .file-icon").forEach(el=>{
    el.addEventListener("click", e=>{
      e.stopPropagation();
      openView(el.dataset.idx);
    });
  });
}

/* ===== –°–û–ó–î–ê–ù–ò–ï / –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ===== */
createBtn.onclick = () => {
  editIndex = null;
  modalTitle.textContent = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å";
  form.reset();
  modal.classList.remove("hidden");
};
cancelBtn.onclick = () => modal.classList.add("hidden");

form.addEventListener("submit", e=>{
  e.preventDefault();
  const title = titleInput.value.trim();
  const topic = topicInput.value.trim();
  const text  = textInput.value.trim();
  const files = fileInput.files;

  // —á–∏—Ç–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –ø—Ä–µ–∂–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  if (files.length > 0) {
    const promises = [...files].map(f => new Promise(res=>{
      const r = new FileReader();
      r.onload = () => res({ name:f.name, data:r.result, type:f.type });
      r.readAsDataURL(f);
    }));
    Promise.all(promises).then(results=>{
      saveNote(title, topic, text, results);
    });
  } else {
    const prev = editIndex!==null ? (notes[editIndex].files||[]) : [];
    saveNote(title, topic, text, prev);
  }
});

function saveNote(title, topic, text, files){
  const newNote = { title, topic, text, files };
  if (editIndex !== null) { notes[editIndex] = newNote; editIndex = null; }
  else { notes.push(newNote); }
  localStorage.setItem("dailyNotes", JSON.stringify(notes));
  modal.classList.add("hidden");
  renderNotes();
}

window.editNote = i => {
  editIndex = i;
  const n = notes[i];
  modalTitle.textContent = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å";
  titleInput.value = n.title || "";
  topicInput.value = n.topic || "";
  textInput.value  = n.text  || "";
  fileInput.value = ""; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
  modal.classList.remove("hidden");
};

/* ===== –£–î–ê–õ–ï–ù–ò–ï + UNDO ===== */
window.deleteNote = i => {
  const removed = notes.splice(i,1)[0];
  lastDeleted = { removed, index: i };
  localStorage.setItem("dailyNotes", JSON.stringify(notes));
  renderNotes();
  showToast();
};
function showToast(){
  toast.classList.remove('hidden');
  clearTimeout(undoTimer);
  undoTimer = setTimeout(()=> toast.classList.add('hidden'), 5000);
}
undoLink.onclick = () => {
  if(!lastDeleted) return;
  notes.splice(lastDeleted.index, 0, lastDeleted.removed);
  localStorage.setItem("dailyNotes", JSON.stringify(notes));
  lastDeleted = null;
  toast.classList.add('hidden');
  renderNotes();
};

/* ===== –ü–†–û–°–ú–û–¢–†: —Å–Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª—ã, –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç ===== */
function renderFilePreview(f){
  const { name, data } = f;

  // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (data.startsWith('data:image')) {
    return `<div><p>üì∑ ${name}</p><img src="${data}" alt="${name}"></div>`;
  }

  // PDF
  if (data.startsWith('data:application/pdf')) {
    return `<div><p>üìÑ ${name}</p><embed src="${data}" type="application/pdf" width="100%" height="300"></div>`;
  }

  // —Ç–µ–∫—Å—Ç–æ–≤—ã–µ (txt, csv –∏ —Ç.–ø.)
  if (data.startsWith('data:text')) {
    const text = atob(data.split(',')[1]).slice(0, 1000);
    return `<div><p>üìÑ ${name}</p><pre>${text}</pre></div>`;
  }

  // Word (docx) ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
  if (data.startsWith('data:application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {
    mammoth.extractRawText({ arrayBuffer: base64ToArrayBuffer(data) })
      .then(result => {
        const el = document.querySelector(`#viewFiles pre.loading[data-file="${CSS.escape(name)}"]`);
        if (el) el.outerHTML = `<pre>${result.value}</pre>`;
      })
      .catch(()=>{});
    return `<div><p>üìÑ ${name}</p><pre class="loading" data-file="${name}">–ó–∞–≥—Ä—É–∂–∞—é Word...</pre>
            <a href="${data}" download="${name}">‚¨á –°–∫–∞—á–∞—Ç—å DOCX</a></div>`;
  }

  // Excel (xlsx) ‚Äî –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
  if (data.startsWith('data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')) {
    try {
      const wb = XLSX.read(base64ToArrayBuffer(data), { type: "array" });
      const sheet = wb.Sheets[wb.SheetNames[0]];
      const json  = XLSX.utils.sheet_to_json(sheet, { header:1, raw:false });
      const preview = json.slice(0,8)
        .map(row => "<tr>" + row.map(c => `<td>${c ?? ""}</td>`).join("") + "</tr>")
        .join("");
      return `<div><p>üìä ${name}</p><table><tbody>${preview}</tbody></table>
              <a href="${data}" download="${name}">‚¨á –°–∫–∞—á–∞—Ç—å XLSX</a></div>`;
    } catch(e) {
      return `<div><p>üìä ${name}</p><a href="${data}" download="${name}">‚¨á –°–∫–∞—á–∞—Ç—å XLSX</a></div>`;
    }
  }

  // PowerPoint ‚Äî –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
  if (data.startsWith('data:application/vnd.openxmlformats-officedocument.presentationml.presentation')) {
    return `<div><p>üìΩ ${name}</p><a href="${data}" download="${name}">‚¨á –°–∫–∞—á–∞—Ç—å PPTX</a></div>`;
  }

  // –ê—É–¥–∏–æ
  if (name.match(/\.(mp3|wav|ogg)$/i)) {
    return `<div><p>üéµ ${name}</p><audio controls src="${data}"></audio></div>`;
  }

  // –í–∏–¥–µ–æ
  if (name.match(/\.(mp4|webm|ogg)$/i)) {
    return `<div><p>üé• ${name}</p><video controls src="${data}"></video></div>`;
  }

  // fallback
  return `<div><p>üìé ${name}</p><a href="${data}" download="${name}">‚¨á –°–∫–∞—á–∞—Ç—å</a></div>`;
}

function openView(i){
  const n = notes[i];
  const meta = getTopicMeta(n.topic);

  viewTitle.textContent = n.title;
  viewTopic.textContent = n.topic ? `${meta.emoji} –¢–µ–º–∞: ${n.topic}` : "";

  // —Ñ–∞–π–ª—ã ‚Äî –ø–µ—Ä–≤—ã–º–∏
  if (n.files && n.files.length) {
    const hasImg = n.files.some(f => f.data.startsWith('data:image'));
    const list = n.files.map(renderFilePreview).join("");
    viewFiles.innerHTML = hasImg ? `<div class="carousel">${list}</div>` : list;
  } else {
    viewFiles.innerHTML = `<div>–ù–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π</div>`;
  }

  // –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç
  viewText.innerHTML = window.marked ? marked.parse(n.text || '') : (n.text || '');

  viewModal.classList.remove("hidden");
}
closeViewBtn.onclick = () => viewModal.classList.add("hidden");

/* ===== –ü–æ–∏—Å–∫ / –≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç ===== */
searchInput.oninput = () => { query = searchInput.value.toLowerCase(); renderNotes(); };

exportBtn.onclick = () => {
  const blob = new Blob([JSON.stringify(notes)], { type:'application/json' });
  const url  = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url; a.download = 'daily-notes.json'; a.click();
  URL.revokeObjectURL(url);
};

importBtn.onclick = () => importInput.click();
importInput.onchange = e => {
  const f = e.target.files[0]; if (!f) return;
  const r = new FileReader();
  r.onload = () => {
    try {
      notes = JSON.parse(r.result);
      localStorage.setItem("dailyNotes", JSON.stringify(notes));
      renderNotes();
    } catch {
      alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON");
    }
  };
  r.readAsText(f);
};

/* ===== –ü–ª–æ—Ç–Ω–æ—Å—Ç—å / –ö–ª–∞–≤–∏—à–∏ / DnD ===== */
densityBtn.onclick = () => {
  document.body.classList.toggle('compact');
  densityBtn.textContent = document.body.classList.contains('compact') ? '–£–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ' : '–ö–æ–º–ø–∞–∫—Ç–Ω–æ';
};

document.addEventListener('keydown', e=>{
  if (e.key==='n' && modal.classList.contains('hidden') && viewModal.classList.contains('hidden')) {
    e.preventDefault(); createBtn.click();
  }
  if (e.key==='/' && document.activeElement!==searchInput) {
    e.preventDefault(); searchInput.focus();
  }
  if (e.key==='Escape') {
    modal.classList.add('hidden');
    viewModal.classList.add('hidden');
    toast.classList.add('hidden');
  }
});

window.addEventListener('dragover', e=> e.preventDefault());
window.addEventListener('drop', e=>{
  e.preventDefault();
  const f = e.dataTransfer.files?.[0]; if (!f) return;
  editIndex = null;
  modalTitle.textContent = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å";
  modal.classList.remove("hidden");
  form.reset();
  const dt = new DataTransfer(); dt.items.add(f); fileInput.files = dt.files;
  titleInput.value ||= f.name;
});

/* —Å—Ç–∞—Ä—Ç */
renderNotes();
